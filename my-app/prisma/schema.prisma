// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Common models across all features
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          Role      @default(USER)

  // Relations
  accounts      Account[]
  sessions      Session[]
  conversations Conversation[]
  documents     Document[]
  notes         Note[]
  orders        Order[]
  cart          CartItem[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

// AI Chatbot with RAG models
model Conversation {
  id        String    @id @default(cuid())
  title     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  
  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  documents Document[] @relation("ConversationDocuments")
}

model Message {
  id             String       @id @default(cuid())
  content        String       @db.Text
  role           MessageRole
  createdAt      DateTime     @default(now())
  conversationId String
  
  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  citations      Citation[]
}

model Document {
  id             String       @id @default(cuid())
  name           String
  type           String
  content        String       @db.Text
  chunks         Chunk[]
  createdAt      DateTime     @default(now())
  userId         String
  
  // Relations
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations  Conversation[] @relation("ConversationDocuments")
}

model Chunk {
  id          String   @id @default(cuid())
  content     String   @db.Text
  metadata    Json?
  embedding   Json?    // Store embedding vector
  documentId  String
  
  // Relations
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  citations   Citation[]
}

model Citation {
  id        String   @id @default(cuid())
  messageId String
  chunkId   String
  
  // Relations
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  chunk     Chunk    @relation(fields: [chunkId], references: [id], onDelete: Cascade)
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

// E-commerce models
model Product {
  id          String   @id @default(cuid())
  name        String
  description String    @db.Text
  price       Float
  images      String[]
  category    String
  inStock     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  userId    String
  productId String
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id          String      @id @default(cuid())
  total       Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  paymentId  String? 
  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]
}

model OrderItem {
  id          String   @id @default(cuid())
  quantity    Int
  price       Float    // Store price at time of purchase
  productId   String
  orderId     String
  
  // Relations
  product     Product  @relation(fields: [productId], references: [id])
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

// Notes App models
model Note {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}